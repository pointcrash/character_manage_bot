from aiogram import types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from config import MESSAGES, CharacterManagement
from storage.character_storage import CharacterStorage

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
character_storage = CharacterStorage()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_money
async def cmd_set_money(message: types.Message, state: FSMContext):
    characters = character_storage.get_user_characters(message.from_user.id)
    
    if not characters:
        await message.answer(MESSAGES["character_management"]["no_characters"])
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=char["name"])] for char in characters],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–Ω—å–≥–∞–º–∏:",
        reply_markup=keyboard
    )
    await state.set_state(CharacterManagement.waiting_for_money_character)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–Ω—å–≥–∞–º–∏
async def process_money_character(message: types.Message, state: FSMContext):
    character_name = message.text.strip()
    character = character_storage.load_character(message.from_user.id, character_name)
    
    if not character:
        await message.answer(
            MESSAGES["common"]["invalid_input"],
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(character_name=character_name)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å"), KeyboardButton(text="–ü–æ—Ç—Ä–∞—Ç–∏—Ç—å")],
            [KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:",
        reply_markup=keyboard
    )
    await state.set_state(CharacterManagement.waiting_for_money_operation)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–µ–Ω—å–≥–∞–º–∏
async def process_money_operation(message: types.Message, state: FSMContext):
    operation = message.text.strip()
    data = await state.get_data()
    character_name = data["character_name"]
    character = character_storage.load_character(message.from_user.id, character_name)
    
    if operation == "–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å":
        money = character['equipment']['money']
        balance_info = f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_name}:\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–≤–Ω—ã –Ω—É–ª—é
        all_zero = all(value == 0 for value in money.values())
        
        if all_zero:
            balance_info += f"‚Ä¢ {money['platinum']} –ø–ª–∞—Ç–∏–Ω–æ–≤—ã—Ö\n"
            balance_info += f"‚Ä¢ {money['gold']} –∑–æ–ª–æ—Ç—ã—Ö\n"
            balance_info += f"‚Ä¢ {money['silver']} —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö\n"
            balance_info += f"‚Ä¢ {money['copper']} –º–µ–¥–Ω—ã—Ö"
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if money['platinum'] > 0:
                balance_info += f"‚Ä¢ {money['platinum']} –ø–ª–∞—Ç–∏–Ω–æ–≤—ã—Ö\n"
            if money['gold'] > 0:
                balance_info += f"‚Ä¢ {money['gold']} –∑–æ–ª–æ—Ç—ã—Ö\n"
            if money['silver'] > 0:
                balance_info += f"‚Ä¢ {money['silver']} —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö\n"
            if money['copper'] > 0:
                balance_info += f"‚Ä¢ {money['copper']} –º–µ–¥–Ω—ã—Ö"
        
        await message.answer(balance_info, reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return
    
    if operation not in ["–î–æ–±–∞–≤–∏—Ç—å", "–ü–æ—Ç—Ä–∞—Ç–∏—Ç—å"]:
        await message.answer(
            MESSAGES["common"]["invalid_input"],
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(money_operation=operation)
    
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:\n"
        f"–ø–ª–∞—Ç–∏–Ω–æ–≤—ã–µ –∑–æ–ª–æ—Ç—ã–µ —Å–µ—Ä–µ–±—Ä—è–Ω—ã–µ –º–µ–¥–Ω—ã–µ\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: '0 10 5 0'\n\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:\n"
        f"‚Ä¢ {character['equipment']['money']['platinum']} –ø–ª–∞—Ç–∏–Ω–æ–≤—ã—Ö\n"
        f"‚Ä¢ {character['equipment']['money']['gold']} –∑–æ–ª–æ—Ç—ã—Ö\n"
        f"‚Ä¢ {character['equipment']['money']['silver']} —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö\n"
        f"‚Ä¢ {character['equipment']['money']['copper']} –º–µ–¥–Ω—ã—Ö",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(CharacterManagement.waiting_for_money_amount)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ–Ω–µ–≥
async def process_money_amount(message: types.Message, state: FSMContext):
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –≤–≤–æ–¥ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–Ω–µ—Ç
        values = message.text.strip().split()
        if len(values) != 4:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 4 –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–ø–ª–∞—Ç–∏–Ω–æ–≤—ã–µ –∑–æ–ª–æ—Ç—ã–µ —Å–µ—Ä–µ–±—Ä—è–Ω—ã–µ –º–µ–¥–Ω—ã–µ)")
            return
            
        coins = [int(value) for value in values]
        if any(coin < 0 for coin in coins):
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞.")
        return
    
    data = await state.get_data()
    character_name = data["character_name"]
    operation = data["money_operation"]
    character = character_storage.load_character(message.from_user.id, character_name)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–µ–Ω–µ–≥
    if operation == "–î–æ–±–∞–≤–∏—Ç—å":
        character['equipment']['money']['platinum'] += coins[0]
        character['equipment']['money']['gold'] += coins[1]
        character['equipment']['money']['silver'] += coins[2]
        character['equipment']['money']['copper'] += coins[3]
    else:  # –ü–æ—Ç—Ä–∞—Ç–∏—Ç—å
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–µ–Ω–µ–≥
        if (character['equipment']['money']['platinum'] < coins[0] or
            character['equipment']['money']['gold'] < coins[1] or
            character['equipment']['money']['silver'] < coins[2] or
            character['equipment']['money']['copper'] < coins[3]):
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏.")
            await state.clear()
            return
        
        character['equipment']['money']['platinum'] -= coins[0]
        character['equipment']['money']['gold'] -= coins[1]
        character['equipment']['money']['silver'] -= coins[2]
        character['equipment']['money']['copper'] -= coins[3]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if character_storage.save_character(message.from_user.id, character):
        money = character['equipment']['money']
        balance_info = "–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–≤–Ω—ã –Ω—É–ª—é
        all_zero = all(value == 0 for value in money.values())
        
        if all_zero:
            balance_info += f"‚Ä¢ {money['platinum']} –ø–ª–∞—Ç–∏–Ω–æ–≤—ã—Ö\n"
            balance_info += f"‚Ä¢ {money['gold']} –∑–æ–ª–æ—Ç—ã—Ö\n"
            balance_info += f"‚Ä¢ {money['silver']} —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö\n"
            balance_info += f"‚Ä¢ {money['copper']} –º–µ–¥–Ω—ã—Ö"
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if money['platinum'] > 0:
                balance_info += f"‚Ä¢ {money['platinum']} –ø–ª–∞—Ç–∏–Ω–æ–≤—ã—Ö\n"
            if money['gold'] > 0:
                balance_info += f"‚Ä¢ {money['gold']} –∑–æ–ª–æ—Ç—ã—Ö\n"
            if money['silver'] > 0:
                balance_info += f"‚Ä¢ {money['silver']} —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö\n"
            if money['copper'] > 0:
                balance_info += f"‚Ä¢ {money['copper']} –º–µ–¥–Ω—ã—Ö"
        
        await message.answer(balance_info)
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
    
    await state.clear()

def register_money_management_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–Ω—å–≥–∞–º–∏"""
    dp.message.register(cmd_set_money, Command("set_money"))
    
    dp.message.register(process_money_character, CharacterManagement.waiting_for_money_character)
    dp.message.register(process_money_operation, CharacterManagement.waiting_for_money_operation)
    dp.message.register(process_money_amount, CharacterManagement.waiting_for_money_amount) 