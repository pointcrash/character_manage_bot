from aiogram import types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from config import MESSAGES, CharacterManagement
from storage.character_storage import CharacterStorage

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
character_storage = CharacterStorage()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /inventory
async def cmd_inventory(message: types.Message, state: FSMContext):
    characters = character_storage.get_user_characters(message.from_user.id)
    
    if not characters:
        await message.answer(MESSAGES["character_management"]["no_characters"])
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=char["name"])] for char in characters],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º:",
        reply_markup=keyboard
    )
    await state.set_state(CharacterManagement.waiting_for_inventory_character)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º
async def process_inventory_character(message: types.Message, state: FSMContext):
    character_name = message.text.strip()
    character = character_storage.load_character(message.from_user.id, character_name)
    
    if not character:
        await message.answer(
            MESSAGES["common"]["invalid_input"],
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(character_name=character_name)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç"), KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç")],
            [KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:",
        reply_markup=keyboard
    )
    await state.set_state(CharacterManagement.waiting_for_inventory_operation)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º
async def process_inventory_operation(message: types.Message, state: FSMContext):
    operation = message.text.strip()
    data = await state.get_data()
    character_name = data["character_name"]
    character = character_storage.load_character(message.from_user.id, character_name)
    
    if operation == "–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å":
        inventory_info = f"üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_name}:\n\n"
        
        # –û—Ä—É–∂–∏–µ
        inventory_info += "‚öîÔ∏è –û—Ä—É–∂–∏–µ:\n"
        if character['equipment']['weapons']['items']:
            for item in character['equipment']['weapons']['items']:
                inventory_info += f"‚Ä¢ {item}\n"
        else:
            inventory_info += "–ù–µ—Ç –æ—Ä—É–∂–∏—è\n"
        
        # –ë—Ä–æ–Ω—è
        inventory_info += "\nüõ°Ô∏è –ë—Ä–æ–Ω—è:\n"
        if character['equipment']['armor']['items']:
            for item in character['equipment']['armor']['items']:
                inventory_info += f"‚Ä¢ {item}\n"
        else:
            inventory_info += "–ù–µ—Ç –±—Ä–æ–Ω–∏\n"
        
        # –ü—Ä–µ–¥–º–µ—Ç—ã
        inventory_info += "\nüì¶ –ü—Ä–µ–¥–º–µ—Ç—ã:\n"
        if character['equipment']['items']['items']:
            for item in character['equipment']['items']['items']:
                inventory_info += f"‚Ä¢ {item}\n"
        else:
            inventory_info += "–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n"
        
        await message.answer(inventory_info, reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return
    
    if operation not in ["–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", "–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç"]:
        await message.answer(
            MESSAGES["common"]["invalid_input"],
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(inventory_operation=operation)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ä—É–∂–∏–µ"), KeyboardButton(text="–ë—Ä–æ–Ω—è")],
            [KeyboardButton(text="–ü—Ä–µ–¥–º–µ—Ç—ã")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞:",
        reply_markup=keyboard
    )
    await state.set_state(CharacterManagement.waiting_for_inventory_category)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
async def process_inventory_category(message: types.Message, state: FSMContext):
    category = message.text.strip()
    if category not in ["–û—Ä—É–∂–∏–µ", "–ë—Ä–æ–Ω—è", "–ü—Ä–µ–¥–º–µ—Ç—ã"]:
        await message.answer(
            MESSAGES["common"]["invalid_input"],
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∫–ª—é—á–∏
    category_mapping = {
        "–û—Ä—É–∂–∏–µ": "weapons",
        "–ë—Ä–æ–Ω—è": "armor",
        "–ü—Ä–µ–¥–º–µ—Ç—ã": "items"
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(inventory_category=category)
    await state.update_data(category_key=category_mapping[category])
    
    data = await state.get_data()
    operation = data["inventory_operation"]
    
    if operation == "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(CharacterManagement.waiting_for_inventory_item_name)
    else:  # –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç
        data = await state.get_data()
        character_name = data["character_name"]
        character = character_storage.load_character(message.from_user.id, character_name)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_key = category_mapping[category]
        items = character['equipment'][category_key]['items']
        
        if not items:
            await message.answer(
                f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤.",
                reply_markup=ReplyKeyboardRemove()
            )
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=item)] for item in items],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=keyboard
        )
        await state.set_state(CharacterManagement.waiting_for_inventory_item_remove)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
async def process_inventory_item_name(message: types.Message, state: FSMContext):
    item_name = message.text.strip()
    if not item_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    data = await state.get_data()
    character_name = data["character_name"]
    category = data["inventory_category"]
    category_key = data["category_key"]
    character = character_storage.load_character(message.from_user.id, character_name)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if item_name in character['equipment'][category_key]['items']:
        await message.answer(
            f"–ü—Ä–µ–¥–º–µ—Ç '{item_name}' —É–∂–µ –µ—Å—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return
    
    character['equipment'][category_key]['items'].append(item_name)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if character_storage.save_character(message.from_user.id, character):
        await message.answer(
            f"–ü—Ä–µ–¥–º–µ—Ç '{item_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category}.",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
            reply_markup=ReplyKeyboardRemove()
        )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
async def process_inventory_item_remove(message: types.Message, state: FSMContext):
    item_name = message.text.strip()
    data = await state.get_data()
    character_name = data["character_name"]
    category = data["inventory_category"]
    category_key = data["category_key"]
    character = character_storage.load_character(message.from_user.id, character_name)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if item_name not in character['equipment'][category_key]['items']:
        await message.answer(
            f"–ü—Ä–µ–¥–º–µ—Ç '{item_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}.",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return
    
    character['equipment'][category_key]['items'].remove(item_name)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if character_storage.save_character(message.from_user.id, character):
        await message.answer(
            f"–ü—Ä–µ–¥–º–µ—Ç '{item_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}.",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
            reply_markup=ReplyKeyboardRemove()
        )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /view_equipment
async def cmd_view_equipment(message: types.Message, state: FSMContext):
    characters = character_storage.get_user_characters(message.from_user.id)
    
    if not characters:
        await message.answer(MESSAGES["character_management"]["no_characters"])
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=char["name"])] for char in characters],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è:",
        reply_markup=keyboard
    )
    await state.set_state(CharacterManagement.waiting_for_view_equipment_character)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è
async def process_view_equipment_character(message: types.Message, state: FSMContext):
    character_name = message.text.strip()
    character = character_storage.load_character(message.from_user.id, character_name)
    
    if not character:
        await message.answer(
            MESSAGES["common"]["invalid_input"],
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–∏
    equipment_info = f"üéí –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_name}:\n\n"
    
    # –û—Ä—É–∂–∏–µ
    equipment_info += "‚öîÔ∏è –û—Ä—É–∂–∏–µ:\n"
    if character['equipment']['weapons']['items']:
        for weapon in character['equipment']['weapons']['items']:
            equipment_info += f"‚Ä¢ {weapon}\n"
    else:
        equipment_info += "–ù–µ—Ç –æ—Ä—É–∂–∏—è\n"
    
    # –ë—Ä–æ–Ω—è
    equipment_info += "\nüõ°Ô∏è –ë—Ä–æ–Ω—è:\n"
    if character['equipment']['armor']['items']:
        for armor in character['equipment']['armor']['items']:
            equipment_info += f"‚Ä¢ {armor}\n"
    else:
        equipment_info += "–ù–µ—Ç –±—Ä–æ–Ω–∏\n"
    
    # –ü—Ä–µ–¥–º–µ—Ç—ã
    equipment_info += "\nüì¶ –ü—Ä–µ–¥–º–µ—Ç—ã:\n"
    if character['equipment']['items']['items']:
        for item in character['equipment']['items']['items']:
            equipment_info += f"‚Ä¢ {item}\n"
    else:
        equipment_info += "–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n"
    
    # –î–µ–Ω—å–≥–∏
    money = character['equipment']['money']
    equipment_info += "\nüí∞ –î–µ–Ω—å–≥–∏:\n"
    if any([money['copper'], money['silver'], money['gold'], money['platinum']]):
        if money['platinum']: equipment_info += f"‚Ä¢ {money['platinum']} –ø–ª–∞—Ç–∏–Ω–æ–≤—ã—Ö\n"
        if money['gold']: equipment_info += f"‚Ä¢ {money['gold']} –∑–æ–ª–æ—Ç—ã—Ö\n"
        if money['silver']: equipment_info += f"‚Ä¢ {money['silver']} —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö\n"
        if money['copper']: equipment_info += f"‚Ä¢ {money['copper']} –º–µ–¥–Ω—ã—Ö\n"
    else:
        equipment_info += "–ù–µ—Ç –¥–µ–Ω–µ–≥\n"
    
    await message.answer(equipment_info, reply_markup=ReplyKeyboardRemove())
    await state.clear()

def register_inventory_management_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º"""
    dp.message.register(cmd_inventory, Command("inventory"))
    dp.message.register(cmd_view_equipment, Command("view_equipment"))
    
    dp.message.register(process_inventory_character, CharacterManagement.waiting_for_inventory_character)
    dp.message.register(process_inventory_operation, CharacterManagement.waiting_for_inventory_operation)
    dp.message.register(process_inventory_category, CharacterManagement.waiting_for_inventory_category)
    dp.message.register(process_inventory_item_name, CharacterManagement.waiting_for_inventory_item_name)
    dp.message.register(process_inventory_item_remove, CharacterManagement.waiting_for_inventory_item_remove)
    dp.message.register(process_view_equipment_character, CharacterManagement.waiting_for_view_equipment_character) 