from aiogram import types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from config import MESSAGES, CharacterManagement
from storage.character_storage import CharacterStorage

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
character_storage = CharacterStorage()

def calculate_modifier(ability_score: int) -> int:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
    return (ability_score - 10) // 2

def calculate_skill_value(character: dict, skill: str) -> int:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ —Å —É—á–µ—Ç–æ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –±–æ–Ω—É—Å–∞ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞"""
    # –ù–∞—Ö–æ–¥–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π –∑–∞–≤–∏—Å–∏—Ç –Ω–∞–≤—ã–∫
    ability = None
    for abil, data in character['abilities'].items():
        if skill in data['skills']:
            ability = abil
            break
    
    if ability is None:
        return 0
    
    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    ability_modifier = character['abilities'][ability]['modifier']
    
    # –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞
    proficiency_bonus = character['base_stats']['proficiency_bonus']['value']
    
    # –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    value = ability_modifier
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ –µ—Å–ª–∏ –Ω–∞–≤—ã–∫ –≤ —Å–ø–∏—Å–∫–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞
    if skill in character['advanced_stats']['skills']['proficiencies']:
        value += proficiency_bonus
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ –µ—Å–ª–∏ –Ω–∞–≤—ã–∫ –≤ —Å–ø–∏—Å–∫–µ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã
    if skill in character['advanced_stats']['skills']['expertise']:
        value += proficiency_bonus * 2
    
    return value

def get_all_skills(character: dict) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    skills = []
    for ability_data in character['abilities'].values():
        skills.extend(ability_data['skills'])
    return skills

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_characters
async def cmd_list_characters(message: types.Message):
    characters = character_storage.get_user_characters(message.from_user.id)
    
    if not characters:
        await message.answer(MESSAGES["character_management"]["no_characters"])
        return
    
    characters_list = "\n".join(
        f"üë§ {char['name']} - {char['race']} {char['class_name']} {char['level']} —É—Ä–æ–≤–Ω—è"
        for char in characters
    )
    
    await message.answer(
        MESSAGES["character_management"]["list_characters"].format(
            characters_list=characters_list
        )
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /view_character
async def cmd_view_character(message: types.Message, state: FSMContext):
    characters = character_storage.get_user_characters(message.from_user.id)
    
    if not characters:
        await message.answer(MESSAGES["character_management"]["no_characters"])
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=char["name"])] for char in characters],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        MESSAGES["character_management"]["select_character"],
        reply_markup=keyboard
    )
    await state.set_state(CharacterManagement.waiting_for_character_select)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
async def process_character_select(message: types.Message, state: FSMContext):
    character_name = message.text.strip()
    character = character_storage.load_character(message.from_user.id, character_name)
    
    if not character:
        await message.answer(
            MESSAGES["common"]["invalid_input"],
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
    character_info = (
        f"üë§ {character['name']}\n"
        f"–†–∞—Å–∞: {character['race']}\n"
        f"–ö–ª–∞—Å—Å: {character['class_name']}\n"
        f"–£—Ä–æ–≤–µ–Ω—å: {character['level']}\n\n"
        f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö
    for ability, data in character['abilities'].items():
        character_info += (
            f"{data['name']}: {data['value']} "
            f"(–º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {data['modifier']:+d})\n"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    character_info += f"\n–ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
    character_info += f"–•–∏—Ç—ã: {character['base_stats']['hit_points']['current']}/{character['base_stats']['hit_points']['maximum']}\n"
    character_info += f"–ö–ª–∞—Å—Å –±—Ä–æ–Ω–∏: {character['base_stats']['armor_class']['value']}\n"
    character_info += f"–ë–æ–Ω—É—Å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞: +{character['base_stats']['proficiency_bonus']['value']}\n"
    character_info += f"–°–∫–æ—Ä–æ—Å—Ç—å: {character['base_stats']['speed']['current']} —Ñ—É—Ç–æ–≤\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≤—ã–∫–∞—Ö
    character_info += f"\n–ù–∞–≤—ã–∫–∏:\n"
    proficiencies = character['advanced_stats']['skills']['proficiencies']
    expertise = character['advanced_stats']['skills']['expertise']
    
    for skill, _ in character['advanced_stats']['skills']['values'].items():
        value = calculate_skill_value(character, skill)
        if skill in expertise:
            character_info += f"  {skill}: {value:+d} ‚úì‚úì\n"
        elif skill in proficiencies:
            character_info += f"  {skill}: {value:+d} ‚úì\n"
        else:
            character_info += f"  {skill}: {value:+d}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–∏
    character_info += f"\n–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ:\n"
    
    # –û—Ä—É–∂–∏–µ
    if character['equipment']['weapons']['items']:
        character_info += f"–û—Ä—É–∂–∏–µ:\n"
        for weapon in character['equipment']['weapons']['items']:
            character_info += f"  ‚Ä¢ {weapon}\n"
    
    # –ë—Ä–æ–Ω—è
    if character['equipment']['armor']['items']:
        character_info += f"–ë—Ä–æ–Ω—è:\n"
        for armor in character['equipment']['armor']['items']:
            character_info += f"  ‚Ä¢ {armor}\n"
    
    # –ü—Ä–µ–¥–º–µ—Ç—ã
    if character['equipment']['items']['items']:
        character_info += f"–ü—Ä–µ–¥–º–µ—Ç—ã:\n"
        for item in character['equipment']['items']['items']:
            character_info += f"  ‚Ä¢ {item}\n"
    
    # –î–µ–Ω—å–≥–∏
    money = character['equipment']['money']
    if any([money['copper'], money['silver'], money['gold'], money['platinum']]):
        character_info += f"–î–µ–Ω—å–≥–∏:\n"
        if money['platinum']: character_info += f"  ‚Ä¢ {money['platinum']} –ø–ª–∞—Ç–∏–Ω–æ–≤—ã—Ö\n"
        if money['gold']: character_info += f"  ‚Ä¢ {money['gold']} –∑–æ–ª–æ—Ç—ã—Ö\n"
        if money['silver']: character_info += f"  ‚Ä¢ {money['silver']} —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö\n"
        if money['copper']: character_info += f"  ‚Ä¢ {money['copper']} –º–µ–¥–Ω—ã—Ö\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∏—á–µ—Å–∫–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è—Ö
    if any(character['magic']['spell_slots']['values'].values()):
        character_info += f"\n–ú–∞–≥–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:\n"
        
        # –Ø—á–µ–π–∫–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
        spell_slots = character['magic']['spell_slots']['values']
        if any(spell_slots.values()):
            character_info += f"–Ø—á–µ–π–∫–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π:\n"
            for level, slots in spell_slots.items():
                if slots > 0:
                    character_info += f"  ‚Ä¢ {level} —É—Ä–æ–≤–µ–Ω—å: {slots}\n"
        
        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
        if character['magic']['spells_known']['cantrips'] or character['magic']['spells_known']['spells']:
            character_info += f"–ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è:\n"
            if character['magic']['spells_known']['cantrips']:
                character_info += f"  –ó–∞–≥–æ–≤–æ—Ä—ã:\n"
                for spell in character['magic']['spells_known']['cantrips']:
                    character_info += f"    ‚Ä¢ {spell}\n"
            if character['magic']['spells_known']['spells']:
                character_info += f"  –ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è:\n"
                for spell in character['magic']['spells_known']['spells']:
                    character_info += f"    ‚Ä¢ {spell}\n"
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
        if character['magic']['spell_save_dc']['value'] or character['magic']['spell_attack_bonus']['value']:
            character_info += f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π:\n"
            if character['magic']['spell_save_dc']['value']:
                character_info += f"  ‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å —Å–ø–∞—Å–±—Ä–æ—Å–∫–∞: {character['magic']['spell_save_dc']['value']}\n"
            if character['magic']['spell_attack_bonus']['value']:
                character_info += f"  ‚Ä¢ –ë–æ–Ω—É—Å –∫ –∞—Ç–∞–∫–µ: +{character['magic']['spell_attack_bonus']['value']}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è—Ö –∏ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞—Ö
    if character['advanced_stats']['resistances']['values'] or character['advanced_stats']['immunities']['values']:
        character_info += f"\n–û—Å–æ–±—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:\n"
        if character['advanced_stats']['resistances']['values']:
            character_info += f"–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è:\n"
            for resistance in character['advanced_stats']['resistances']['values']:
                character_info += f"  ‚Ä¢ {resistance}\n"
        if character['advanced_stats']['immunities']['values']:
            character_info += f"–ò–º–º—É–Ω–∏—Ç–µ—Ç—ã:\n"
            for immunity in character['advanced_stats']['immunities']['values']:
                character_info += f"  ‚Ä¢ {immunity}\n"
    
    await message.answer(
        character_info,
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_character
async def cmd_delete_character(message: types.Message, state: FSMContext):
    characters = character_storage.get_user_characters(message.from_user.id)
    
    if not characters:
        await message.answer(MESSAGES["character_management"]["no_characters"])
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=char["name"])] for char in characters],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        MESSAGES["character_management"]["select_character"],
        reply_markup=keyboard
    )
    await state.set_state(CharacterManagement.waiting_for_delete_confirmation)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
async def process_delete_confirmation(message: types.Message, state: FSMContext):
    character_name = message.text.strip()
    character = character_storage.load_character(message.from_user.id, character_name)
    
    if not character:
        await message.answer(
            MESSAGES["common"]["invalid_input"],
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–¥–∞"), KeyboardButton(text="–Ω–µ—Ç")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        MESSAGES["character_management"]["delete_confirmation"].format(
            name=character_name
        ),
        reply_markup=keyboard
    )
    await state.update_data(character_name=character_name)
    await state.set_state(CharacterManagement.waiting_for_delete_answer)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
async def process_delete_answer(message: types.Message, state: FSMContext):
    answer = message.text.strip().lower()
    data = await state.get_data()
    character_name = data["character_name"]
    
    if answer == "–¥–∞":
        if character_storage.delete_character(message.from_user.id, character_name):
            await message.answer(
                MESSAGES["character_management"]["delete_success"].format(
                    name=character_name
                ),
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            await message.answer(
                MESSAGES["common"]["error"],
                reply_markup=ReplyKeyboardRemove()
            )
    else:
        await message.answer(
            MESSAGES["character_management"]["delete_cancelled"],
            reply_markup=ReplyKeyboardRemove()
        )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_proficiencies
async def cmd_set_proficiencies(message: types.Message, state: FSMContext):
    characters = character_storage.get_user_characters(message.from_user.id)
    
    if not characters:
        await message.answer(MESSAGES["character_management"]["no_characters"])
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=char["name"])] for char in characters],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ –Ω–∞–≤—ã–∫–æ–≤:",
        reply_markup=keyboard
    )
    await state.set_state(CharacterManagement.waiting_for_proficiencies_character)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞
async def process_proficiencies_character(message: types.Message, state: FSMContext):
    character_name = message.text.strip()
    character = character_storage.load_character(message.from_user.id, character_name)
    
    if not character:
        await message.answer(
            MESSAGES["common"]["invalid_input"],
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(character_name=character_name)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
    all_skills = get_all_skills(character)
    
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞.\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: {', '.join(all_skills)}",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(CharacterManagement.waiting_for_proficiencies_list)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞
async def process_proficiencies_list(message: types.Message, state: FSMContext):
    data = await state.get_data()
    character_name = data["character_name"]
    character = character_storage.load_character(message.from_user.id, character_name)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
    all_skills = get_all_skills(character)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–≤—ã–∫–∏
    input_skills = [skill.strip() for skill in message.text.split()]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞–≤—ã–∫–æ–≤
    invalid_skills = [skill for skill in input_skills if skill not in all_skills]
    if invalid_skills:
        await message.answer(
            f"–°–ª–µ–¥—É—é—â–∏–µ –Ω–∞–≤—ã–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {', '.join(invalid_skills)}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: {', '.join(all_skills)}"
        )
        return
    
    # –£–¥–∞–ª—è–µ–º –Ω–∞–≤—ã–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º –µ—Å—Ç—å
    character['advanced_stats']['skills']['proficiencies'] = list(
        set(character['advanced_stats']['skills']['proficiencies']) ^ set(input_skills))
    
    # –£–¥–∞–ª—è–µ–º –Ω–∞–≤—ã–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã, –µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º –µ—Å—Ç—å
    character['advanced_stats']['skills']['expertise'] = [
        skill for skill in character['advanced_stats']['skills']['expertise']
        if skill not in input_skills
    ]
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤
    skill_values = {}
    for skill in all_skills:
        skill_values[skill] = calculate_skill_value(character, skill)
    character['advanced_stats']['skills']['values'] = skill_values
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if character_storage.save_character(message.from_user.id, character):
        await message.answer("–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –Ω–∞–≤—ã–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_expertise
async def cmd_set_expertise(message: types.Message, state: FSMContext):
    characters = character_storage.get_user_characters(message.from_user.id)
    
    if not characters:
        await message.answer(MESSAGES["character_management"]["no_characters"])
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=char["name"])] for char in characters],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –Ω–∞–≤—ã–∫–æ–≤:",
        reply_markup=keyboard
    )
    await state.set_state(CharacterManagement.waiting_for_expertise_character)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã
async def process_expertise_character(message: types.Message, state: FSMContext):
    character_name = message.text.strip()
    character = character_storage.load_character(message.from_user.id, character_name)
    
    if not character:
        await message.answer(
            MESSAGES["common"]["invalid_input"],
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(character_name=character_name)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
    all_skills = get_all_skills(character)
    
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã.\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: {', '.join(all_skills)}",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(CharacterManagement.waiting_for_expertise_list)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã
async def process_expertise_list(message: types.Message, state: FSMContext):
    data = await state.get_data()
    character_name = data["character_name"]
    character = character_storage.load_character(message.from_user.id, character_name)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
    all_skills = get_all_skills(character)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–≤—ã–∫–∏
    input_skills = [skill.strip() for skill in message.text.split()]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞–≤—ã–∫–æ–≤
    invalid_skills = [skill for skill in input_skills if skill not in all_skills]
    if invalid_skills:
        await message.answer(
            f"–°–ª–µ–¥—É—é—â–∏–µ –Ω–∞–≤—ã–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {', '.join(invalid_skills)}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: {', '.join(all_skills)}"
        )
        return
    
    # –£–¥–∞–ª—è–µ–º –Ω–∞–≤—ã–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º –µ—Å—Ç—å
    character['advanced_stats']['skills']['expertise'] = list(
        set(character['advanced_stats']['skills']['expertise']) ^ set(input_skills))
    
    # –£–¥–∞–ª—è–µ–º –Ω–∞–≤—ã–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞, –µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º –µ—Å—Ç—å
    character['advanced_stats']['skills']['proficiencies'] = [
        skill for skill in character['advanced_stats']['skills']['proficiencies']
        if skill not in input_skills
    ]
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤
    skill_values = {}
    for skill in all_skills:
        skill_values[skill] = calculate_skill_value(character, skill)
    character['advanced_stats']['skills']['values'] = skill_values
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if character_storage.save_character(message.from_user.id, character):
        await message.answer("–≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –Ω–∞–≤—ã–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
    
    await state.clear()

def register_character_management_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏"""
    dp.message.register(cmd_list_characters, Command("list_characters"))
    dp.message.register(cmd_view_character, Command("view_character"))
    dp.message.register(cmd_delete_character, Command("delete_character"))
    dp.message.register(cmd_set_proficiencies, Command("set_proficiencies"))
    dp.message.register(cmd_set_expertise, Command("set_expertise"))
    
    dp.message.register(process_character_select, CharacterManagement.waiting_for_character_select)
    dp.message.register(process_delete_confirmation, CharacterManagement.waiting_for_delete_confirmation)
    dp.message.register(process_delete_answer, CharacterManagement.waiting_for_delete_answer)
    dp.message.register(process_proficiencies_character, CharacterManagement.waiting_for_proficiencies_character)
    dp.message.register(process_proficiencies_list, CharacterManagement.waiting_for_proficiencies_list)
    dp.message.register(process_expertise_character, CharacterManagement.waiting_for_expertise_character)
    dp.message.register(process_expertise_list, CharacterManagement.waiting_for_expertise_list) 