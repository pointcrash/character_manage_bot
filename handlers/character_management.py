from aiogram import types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from config import MESSAGES, CharacterManagement, RACES, CLASSES
from storage.character_storage import CharacterStorage

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
character_storage = CharacterStorage()

def calculate_modifier(ability_score: int) -> int:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
    return (ability_score - 10) // 2

def calculate_skill_value(character: dict, skill: str) -> int:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ —Å —É—á–µ—Ç–æ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –±–æ–Ω—É—Å–∞ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞"""
    # –ù–∞—Ö–æ–¥–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π –∑–∞–≤–∏—Å–∏—Ç –Ω–∞–≤—ã–∫
    ability = None
    for abil, data in character['abilities'].items():
        if skill in data['skills']:
            ability = abil
            break
    
    if ability is None:
        return 0
    
    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    ability_modifier = character['abilities'][ability]['modifier']
    
    # –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞
    proficiency_bonus = character['base_stats']['proficiency_bonus']['value']
    
    # –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    value = ability_modifier
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ –µ—Å–ª–∏ –Ω–∞–≤—ã–∫ –≤ —Å–ø–∏—Å–∫–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞
    if skill in character['advanced_stats']['skills']['proficiencies']:
        value += proficiency_bonus
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ –µ—Å–ª–∏ –Ω–∞–≤—ã–∫ –≤ —Å–ø–∏—Å–∫–µ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã
    if skill in character['advanced_stats']['skills']['expertise']:
        value += proficiency_bonus * 2
    
    return value

def get_all_skills(character: dict) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    skills = []
    for ability_data in character['abilities'].values():
        skills.extend(ability_data['skills'])
    return skills

def calculate_saving_throw_value(character: dict, ability: str) -> int:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø–∞—Å–±—Ä–æ—Å–∫–∞ —Å —É—á–µ—Ç–æ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –±–æ–Ω—É—Å–∞ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    ability_modifier = character['abilities'][ability]['modifier']
    
    # –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞
    proficiency_bonus = character['base_stats']['proficiency_bonus']['value']
    
    # –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    value = ability_modifier
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ –µ—Å–ª–∏ —Å–ø–∞—Å–±—Ä–æ—Å–æ–∫ –≤ —Å–ø–∏—Å–∫–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞
    if character['abilities'][ability]['saving_throw_proficient']:
        value += proficiency_bonus
    
    return value

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_characters
async def cmd_list_characters(message: types.Message):
    characters = character_storage.get_user_characters(message.from_user.id)
    
    if not characters:
        await message.answer(MESSAGES["character_management"]["no_characters"])
        return
    
    characters_list = "\n".join(
        f"üë§ {char['name']} - {char['race']} {char['class_name']} {char['level']} —É—Ä–æ–≤–Ω—è"
        for char in characters
    )
    
    await message.answer(
        MESSAGES["character_management"]["list_characters"].format(
            characters_list=characters_list
        )
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /view_character
async def cmd_view_character(message: types.Message, state: FSMContext):
    characters = character_storage.get_user_characters(message.from_user.id)
    
    if not characters:
        await message.answer(MESSAGES["character_management"]["no_characters"])
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=char["name"])] for char in characters],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        MESSAGES["character_management"]["select_character"],
        reply_markup=keyboard
    )
    await state.set_state(CharacterManagement.waiting_for_character_select)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
async def process_character_select(message: types.Message, state: FSMContext):
    character_name = message.text.strip()
    character = character_storage.load_character(message.from_user.id, character_name)
    
    if not character:
        await message.answer(
            MESSAGES["common"]["invalid_input"],
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
    character_info = (
        f"üë§ {character['name']}\n"
        f"–†–∞—Å–∞: {character['race']}\n"
        f"–ö–ª–∞—Å—Å: {character['class_name']}\n"
        f"–£—Ä–æ–≤–µ–Ω—å: {character['level']}\n\n"
        f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö
    for ability, data in character['abilities'].items():
        character_info += (
            f"{data['name']}: {data['value']} "
            f"(–º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {data['modifier']:+d})\n"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    character_info += f"\n–ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
    character_info += f"–•–∏—Ç—ã: {character['base_stats']['hit_points']['current']}/{character['base_stats']['hit_points']['maximum']}\n"
    character_info += f"–ö–ª–∞—Å—Å –±—Ä–æ–Ω–∏: {character['base_stats']['armor_class']['value']}\n"
    character_info += f"–ë–æ–Ω—É—Å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞: +{character['base_stats']['proficiency_bonus']['value']}\n"
    character_info += f"–°–∫–æ—Ä–æ—Å—Ç—å: {character['base_stats']['speed']['current']} —Ñ—É—Ç–æ–≤\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∞—Å–±—Ä–æ—Å–∫–∞—Ö
    character_info += f"\n–°–ø–∞—Å–±—Ä–æ—Å–∫–∏:\n"
    for ability, data in character['abilities'].items():
        value = character['advanced_stats']['saving_throws']['values'][ability]
        if data['saving_throw_proficient']:
            character_info += f"  {data['name']}: {value:+d} ‚úì\n"
        else:
            character_info += f"  {data['name']}: {value:+d}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≤—ã–∫–∞—Ö
    character_info += f"\n–ù–∞–≤—ã–∫–∏:\n"
    proficiencies = character['advanced_stats']['skills']['proficiencies']
    expertise = character['advanced_stats']['skills']['expertise']
    
    for skill, _ in character['advanced_stats']['skills']['values'].items():
        value = calculate_skill_value(character, skill)
        if skill in expertise:
            character_info += f"  {skill}: {value:+d} ‚úì‚úì\n"
        elif skill in proficiencies:
            character_info += f"  {skill}: {value:+d} ‚úì\n"
        else:
            character_info += f"  {skill}: {value:+d}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è—Ö –∏ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞—Ö
    if character['advanced_stats']['resistances']['values'] or character['advanced_stats']['immunities']['values']:
        character_info += f"\n–û—Å–æ–±—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:\n"
        if character['advanced_stats']['resistances']['values']:
            character_info += f"–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è:\n"
            for resistance in character['advanced_stats']['resistances']['values']:
                character_info += f"  ‚Ä¢ {resistance}\n"
        if character['advanced_stats']['immunities']['values']:
            character_info += f"–ò–º–º—É–Ω–∏—Ç–µ—Ç—ã:\n"
            for immunity in character['advanced_stats']['immunities']['values']:
                character_info += f"  ‚Ä¢ {immunity}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if character.get('description'):
        character_info += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{character['description']}\n"
    
    await message.answer(
        character_info,
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_character
async def cmd_delete_character(message: types.Message, state: FSMContext):
    characters = character_storage.get_user_characters(message.from_user.id)
    
    if not characters:
        await message.answer(MESSAGES["character_management"]["no_characters"])
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=char["name"])] for char in characters],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        MESSAGES["character_management"]["select_character"],
        reply_markup=keyboard
    )
    await state.set_state(CharacterManagement.waiting_for_delete_confirmation)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
async def process_delete_confirmation(message: types.Message, state: FSMContext):
    character_name = message.text.strip()
    character = character_storage.load_character(message.from_user.id, character_name)
    
    if not character:
        await message.answer(
            MESSAGES["common"]["invalid_input"],
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–¥–∞"), KeyboardButton(text="–Ω–µ—Ç")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        MESSAGES["character_management"]["delete_confirmation"].format(
            name=character_name
        ),
        reply_markup=keyboard
    )
    await state.update_data(character_name=character_name)
    await state.set_state(CharacterManagement.waiting_for_delete_answer)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
async def process_delete_answer(message: types.Message, state: FSMContext):
    answer = message.text.strip().lower()
    data = await state.get_data()
    character_name = data["character_name"]
    
    if answer == "–¥–∞":
        if character_storage.delete_character(message.from_user.id, character_name):
            await message.answer(
                MESSAGES["character_management"]["delete_success"].format(
                    name=character_name
                ),
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            await message.answer(
                MESSAGES["common"]["error"],
                reply_markup=ReplyKeyboardRemove()
            )
    else:
        await message.answer(
            MESSAGES["character_management"]["delete_cancelled"],
            reply_markup=ReplyKeyboardRemove()
        )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_proficiencies
async def cmd_set_proficiencies(message: types.Message, state: FSMContext):
    characters = character_storage.get_user_characters(message.from_user.id)
    
    if not characters:
        await message.answer(MESSAGES["character_management"]["no_characters"])
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=char["name"])] for char in characters],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ –Ω–∞–≤—ã–∫–æ–≤:",
        reply_markup=keyboard
    )
    await state.set_state(CharacterManagement.waiting_for_proficiencies_character)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞
async def process_proficiencies_character(message: types.Message, state: FSMContext):
    character_name = message.text.strip()
    character = character_storage.load_character(message.from_user.id, character_name)
    
    if not character:
        await message.answer(
            MESSAGES["common"]["invalid_input"],
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(character_name=character_name)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
    all_skills = get_all_skills(character)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
    current_proficiencies = character['advanced_stats']['skills']['proficiencies']
    
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞.\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: –£—Ö–æ–¥ –∑–∞ –∂–∏–≤–æ—Ç–Ω—ã–º–∏, –ê—Ç–ª–µ—Ç–∏–∫–∞, –°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å\n\n"
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞–≤—ã–∫–∏ —Å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ–º:\n"
        f"{', '.join(current_proficiencies) if current_proficiencies else '–ù–µ—Ç'}\n\n"
        f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥ –Ω–∞–≤—ã–∫–∞ —Å–Ω–∏–º–µ—Ç —Å –Ω–µ–≥–æ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ.\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: {', '.join(all_skills)}",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(CharacterManagement.waiting_for_proficiencies_list)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞
async def process_proficiencies_list(message: types.Message, state: FSMContext):
    data = await state.get_data()
    character_name = data["character_name"]
    character = character_storage.load_character(message.from_user.id, character_name)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
    all_skills = get_all_skills(character)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–≤—ã–∫–∏ –ø–æ –∑–∞–ø—è—Ç—ã–º, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–±–µ–ª—ã –≤–Ω—É—Ç—Ä–∏ –Ω–∞–∑–≤–∞–Ω–∏–π
    input_skills = [skill.strip() for skill in message.text.split(',')]
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
    skills_lower = {skill.lower(): skill for skill in all_skills}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞–≤—ã–∫–æ–≤ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∏—Ö –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    normalized_skills = []
    invalid_skills = []
    
    for skill in input_skills:
        skill_lower = skill.lower()
        if skill_lower in skills_lower:
            normalized_skills.append(skills_lower[skill_lower])
        else:
            invalid_skills.append(skill)
    
    if invalid_skills:
        await message.answer(
            f"–°–ª–µ–¥—É—é—â–∏–µ –Ω–∞–≤—ã–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {', '.join(invalid_skills)}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: {', '.join(all_skills)}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            f"–£—Ö–æ–¥ –∑–∞ –∂–∏–≤–æ—Ç–Ω—ã–º–∏, –ê—Ç–ª–µ—Ç–∏–∫–∞, –°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å"
        )
        return
    
    # –£–¥–∞–ª—è–µ–º –Ω–∞–≤—ã–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º –µ—Å—Ç—å
    character['advanced_stats']['skills']['proficiencies'] = list(
        set(character['advanced_stats']['skills']['proficiencies']) ^ set(normalized_skills))
    
    # –£–¥–∞–ª—è–µ–º –Ω–∞–≤—ã–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã, –µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º –µ—Å—Ç—å
    character['advanced_stats']['skills']['expertise'] = [
        skill for skill in character['advanced_stats']['skills']['expertise']
        if skill not in normalized_skills
    ]
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤
    skill_values = {}
    for skill in all_skills:
        skill_values[skill] = calculate_skill_value(character, skill)
    character['advanced_stats']['skills']['values'] = skill_values
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if character_storage.save_character(message.from_user.id, character):
        await message.answer("–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –Ω–∞–≤—ã–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_expertise
async def cmd_set_expertise(message: types.Message, state: FSMContext):
    characters = character_storage.get_user_characters(message.from_user.id)
    
    if not characters:
        await message.answer(MESSAGES["character_management"]["no_characters"])
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=char["name"])] for char in characters],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –Ω–∞–≤—ã–∫–æ–≤:",
        reply_markup=keyboard
    )
    await state.set_state(CharacterManagement.waiting_for_expertise_character)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã
async def process_expertise_character(message: types.Message, state: FSMContext):
    character_name = message.text.strip()
    character = character_storage.load_character(message.from_user.id, character_name)
    
    if not character:
        await message.answer(
            MESSAGES["common"]["invalid_input"],
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(character_name=character_name)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
    all_skills = get_all_skills(character)
    
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã.\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: {', '.join(all_skills)}",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(CharacterManagement.waiting_for_expertise_list)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã
async def process_expertise_list(message: types.Message, state: FSMContext):
    data = await state.get_data()
    character_name = data["character_name"]
    character = character_storage.load_character(message.from_user.id, character_name)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
    all_skills = get_all_skills(character)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–≤—ã–∫–∏
    input_skills = [skill.strip() for skill in message.text.split()]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞–≤—ã–∫–æ–≤
    invalid_skills = [skill for skill in input_skills if skill not in all_skills]
    if invalid_skills:
        await message.answer(
            f"–°–ª–µ–¥—É—é—â–∏–µ –Ω–∞–≤—ã–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {', '.join(invalid_skills)}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: {', '.join(all_skills)}"
        )
        return
    
    # –£–¥–∞–ª—è–µ–º –Ω–∞–≤—ã–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º –µ—Å—Ç—å
    character['advanced_stats']['skills']['expertise'] = list(
        set(character['advanced_stats']['skills']['expertise']) ^ set(input_skills))
    
    # –£–¥–∞–ª—è–µ–º –Ω–∞–≤—ã–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞, –µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º –µ—Å—Ç—å
    character['advanced_stats']['skills']['proficiencies'] = [
        skill for skill in character['advanced_stats']['skills']['proficiencies']
        if skill not in input_skills
    ]
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤
    skill_values = {}
    for skill in all_skills:
        skill_values[skill] = calculate_skill_value(character, skill)
    character['advanced_stats']['skills']['values'] = skill_values
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if character_storage.save_character(message.from_user.id, character):
        await message.answer("–≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –Ω–∞–≤—ã–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_saving_throws
async def cmd_set_saving_throws(message: types.Message, state: FSMContext):
    characters = character_storage.get_user_characters(message.from_user.id)
    
    if not characters:
        await message.answer(MESSAGES["character_management"]["no_characters"])
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=char["name"])] for char in characters],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–ª–∞–¥–µ–Ω–∏—è —Å–ø–∞—Å–±—Ä–æ—Å–∫–∞–º–∏:",
        reply_markup=keyboard
    )
    await state.set_state(CharacterManagement.waiting_for_saving_throws_character)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–ø–∞—Å–±—Ä–æ—Å–∫–æ–≤
async def process_saving_throws_character(message: types.Message, state: FSMContext):
    character_name = message.text.strip()
    character = character_storage.load_character(message.from_user.id, character_name)
    
    if not character:
        await message.answer(
            MESSAGES["common"]["invalid_input"],
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(character_name=character_name)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    abilities = [data['name'] for data in character['abilities'].values()]
    
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–ª–∞–¥–µ–Ω–∏—è —Å–ø–∞—Å–±—Ä–æ—Å–∫–∞–º–∏.\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {', '.join(abilities)}",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(CharacterManagement.waiting_for_saving_throws_list)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è —Å–ø–∞—Å–±—Ä–æ—Å–∫–æ–≤
async def process_saving_throws_list(message: types.Message, state: FSMContext):
    data = await state.get_data()
    character_name = data["character_name"]
    character = character_storage.load_character(message.from_user.id, character_name)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    abilities = {data['name']: ability for ability, data in character['abilities'].items()}
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    input_abilities = [ability.strip() for ability in message.text.split()]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    invalid_abilities = [ability for ability in input_abilities if ability not in abilities]
    if invalid_abilities:
        await message.answer(
            f"–°–ª–µ–¥—É—é—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {', '.join(invalid_abilities)}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {', '.join(abilities.keys())}"
        )
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–ø–∞—Å–±—Ä–æ—Å–∫–∏
    for ability in character['abilities'].values():
        ability['saving_throw_proficient'] = False
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    for ability_name in input_abilities:
        ability_key = abilities[ability_name]
        character['abilities'][ability_key]['saving_throw_proficient'] = True
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–ø–∞—Å–±—Ä–æ—Å–∫–æ–≤
    for ability in character['abilities']:
        character['advanced_stats']['saving_throws']['values'][ability] = calculate_saving_throw_value(character, ability)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if character_storage.save_character(message.from_user.id, character):
        await message.answer("–í–ª–∞–¥–µ–Ω–∏–µ —Å–ø–∞—Å–±—Ä–æ—Å–∫–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_hit_points
async def cmd_set_hit_points(message: types.Message, state: FSMContext):
    characters = character_storage.get_user_characters(message.from_user.id)
    
    if not characters:
        await message.answer(MESSAGES["character_management"]["no_characters"])
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=char["name"])] for char in characters],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è:",
        reply_markup=keyboard
    )
    await state.set_state(CharacterManagement.waiting_for_hit_points_character)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
async def process_hit_points_character(message: types.Message, state: FSMContext):
    character_name = message.text.strip()
    character = character_storage.load_character(message.from_user.id, character_name)
    
    if not character:
        await message.answer(
            MESSAGES["common"]["invalid_input"],
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(character_name=character_name)
    
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:\n"
        f"–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: '20 15 5'\n"
        f"–ï—Å–ª–∏ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —á–∏—Å–ª–æ, —Ç–µ–∫—É—â–µ–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
        f"–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: {character['base_stats']['hit_points']['maximum']}\n"
        f"–¢–µ–∫—É—â–µ–µ: {character['base_stats']['hit_points']['current']}\n"
        f"–í—Ä–µ–º–µ–Ω–Ω–æ–µ: {character['base_stats']['hit_points']['temporary']}",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(CharacterManagement.waiting_for_hit_points_value)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è
async def process_hit_points_value(message: types.Message, state: FSMContext):
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –≤–≤–æ–¥ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ, —Ç–µ–∫—É—â–µ–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
        values = message.text.strip().split()
        if len(values) > 3:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º—É–º, —Ç–µ–∫—É—â–µ–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: '20 15 5')")
            return
            
        max_hp = int(values[0])
        current_hp = int(values[1]) if len(values) > 1 else max_hp
        temp_hp = int(values[2]) if len(values) > 2 else 0
        
        if max_hp < 0 or current_hp < 0 or temp_hp < 0:
            raise ValueError
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ
        if current_hp > max_hp:
            await message.answer("–¢–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ.")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞.")
        return
    
    data = await state.get_data()
    character_name = data["character_name"]
    character = character_storage.load_character(message.from_user.id, character_name)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è
    character['base_stats']['hit_points']['maximum'] = max_hp
    character['base_stats']['hit_points']['current'] = current_hp
    character['base_stats']['hit_points']['temporary'] = temp_hp
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if character_storage.save_character(message.from_user.id, character):
        await message.answer(
            f"–ó–¥–æ—Ä–æ–≤—å–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: {max_hp}\n"
            f"–¢–µ–∫—É—â–µ–µ: {current_hp}\n"
            f"–í—Ä–µ–º–µ–Ω–Ω–æ–µ: {temp_hp}"
        )
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_armor_class
async def cmd_set_armor_class(message: types.Message, state: FSMContext):
    characters = character_storage.get_user_characters(message.from_user.id)
    
    if not characters:
        await message.answer(MESSAGES["character_management"]["no_characters"])
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=char["name"])] for char in characters],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª–∞—Å—Å–∞ –±—Ä–æ–Ω–∏:",
        reply_markup=keyboard
    )
    await state.set_state(CharacterManagement.waiting_for_armor_class_character)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª–∞—Å—Å–∞ –±—Ä–æ–Ω–∏
async def process_armor_class_character(message: types.Message, state: FSMContext):
    character_name = message.text.strip()
    character = character_storage.load_character(message.from_user.id, character_name)
    
    if not character:
        await message.answer(
            MESSAGES["common"]["invalid_input"],
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(character_name=character_name)
    
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –±—Ä–æ–Ω–∏ (—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {character['base_stats']['armor_class']['value']}):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(CharacterManagement.waiting_for_armor_class_value)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ –±—Ä–æ–Ω–∏
async def process_armor_class_value(message: types.Message, state: FSMContext):
    try:
        armor_class = int(message.text.strip())
        if armor_class < 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    
    data = await state.get_data()
    character_name = data["character_name"]
    character = character_storage.load_character(message.from_user.id, character_name)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –±—Ä–æ–Ω–∏
    character['base_stats']['armor_class']['value'] = armor_class
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if character_storage.save_character(message.from_user.id, character):
        await message.answer(f"–ö–ª–∞—Å—Å –±—Ä–æ–Ω–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {armor_class}")
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_speed
async def cmd_set_speed(message: types.Message, state: FSMContext):
    characters = character_storage.get_user_characters(message.from_user.id)
    
    if not characters:
        await message.answer(MESSAGES["character_management"]["no_characters"])
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=char["name"])] for char in characters],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏:",
        reply_markup=keyboard
    )
    await state.set_state(CharacterManagement.waiting_for_speed_character)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
async def process_speed_character(message: types.Message, state: FSMContext):
    character_name = message.text.strip()
    character = character_storage.load_character(message.from_user.id, character_name)
    
    if not character:
        await message.answer(
            MESSAGES["common"]["invalid_input"],
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(character_name=character_name)
    
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:\n"
        f"–æ–±—ã—á–Ω–∞—è –ø–æ–ª–µ—Ç –ø–ª–∞–≤–∞–Ω–∏–µ –ª–∞–∑–∞–Ω–∏–µ –∫–æ–ø–∞–Ω–∏–µ\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: '30 0 0 0 0'\n\n"
        f"–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
        f"–û–±—ã—á–Ω–∞—è: {character['base_stats']['speed']['current']}\n"
        f"–ü–æ–ª–µ—Ç: {character['base_stats']['speed']['fly']}\n"
        f"–ü–ª–∞–≤–∞–Ω–∏–µ: {character['base_stats']['speed']['swim']}\n"
        f"–õ–∞–∑–∞–Ω–∏–µ: {character['base_stats']['speed']['climb']}\n"
        f"–ö–æ–ø–∞–Ω–∏–µ: {character['base_stats']['speed']['burrow']}",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(CharacterManagement.waiting_for_speed_value)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
async def process_speed_value(message: types.Message, state: FSMContext):
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –≤–≤–æ–¥ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–µ–π
        values = message.text.strip().split()
        if len(values) != 5:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–æ–±—ã—á–Ω–∞—è –ø–æ–ª–µ—Ç –ø–ª–∞–≤–∞–Ω–∏–µ –ª–∞–∑–∞–Ω–∏–µ –∫–æ–ø–∞–Ω–∏–µ)")
            return
            
        speeds = [int(value) for value in values]
        if any(speed < 0 for speed in speeds):
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞.")
        return
    
    data = await state.get_data()
    character_name = data["character_name"]
    character = character_storage.load_character(message.from_user.id, character_name)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–µ–π
    character['base_stats']['speed']['current'] = speeds[0]
    character['base_stats']['speed']['fly'] = speeds[1]
    character['base_stats']['speed']['swim'] = speeds[2]
    character['base_stats']['speed']['climb'] = speeds[3]
    character['base_stats']['speed']['burrow'] = speeds[4]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if character_storage.save_character(message.from_user.id, character):
        await message.answer(
            f"–°–∫–æ—Ä–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n"
            f"–û–±—ã—á–Ω–∞—è: {speeds[0]} —Ñ—É—Ç–æ–≤\n"
            f"–ü–æ–ª–µ—Ç: {speeds[1]} —Ñ—É—Ç–æ–≤\n"
            f"–ü–ª–∞–≤–∞–Ω–∏–µ: {speeds[2]} —Ñ—É—Ç–æ–≤\n"
            f"–õ–∞–∑–∞–Ω–∏–µ: {speeds[3]} —Ñ—É—Ç–æ–≤\n"
            f"–ö–æ–ø–∞–Ω–∏–µ: {speeds[4]} —Ñ—É—Ç–æ–≤"
        )
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_proficiency_bonus
async def cmd_set_proficiency_bonus(message: types.Message, state: FSMContext):
    characters = character_storage.get_user_characters(message.from_user.id)
    
    if not characters:
        await message.answer(MESSAGES["character_management"]["no_characters"])
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=char["name"])] for char in characters],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ–Ω—É—Å–∞ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞:",
        reply_markup=keyboard
    )
    await state.set_state(CharacterManagement.waiting_for_proficiency_bonus_character)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ–Ω—É—Å–∞ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞
async def process_proficiency_bonus_character(message: types.Message, state: FSMContext):
    character_name = message.text.strip()
    character = character_storage.load_character(message.from_user.id, character_name)
    
    if not character:
        await message.answer(
            MESSAGES["common"]["invalid_input"],
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(character_name=character_name)
    
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ (—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: +{character['base_stats']['proficiency_bonus']['value']}):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(CharacterManagement.waiting_for_proficiency_bonus_value)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞
async def process_proficiency_bonus_value(message: types.Message, state: FSMContext):
    try:
        bonus = int(message.text.strip())
        if bonus < 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    
    data = await state.get_data()
    character_name = data["character_name"]
    character = character_storage.load_character(message.from_user.id, character_name)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞
    character['base_stats']['proficiency_bonus']['value'] = bonus
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ –∏ —Å–ø–∞—Å–±—Ä–æ—Å–∫–æ–≤
    for ability in character['abilities']:
        character['advanced_stats']['saving_throws']['values'][ability] = calculate_saving_throw_value(character, ability)
    
    for skill in character['advanced_stats']['skills']['values']:
        character['advanced_stats']['skills']['values'][skill] = calculate_skill_value(character, skill)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if character_storage.save_character(message.from_user.id, character):
        await message.answer(f"–ë–æ–Ω—É—Å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: +{bonus}")
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit_character
async def cmd_edit_character(message: types.Message, state: FSMContext):
    characters = character_storage.get_user_characters(message.from_user.id)
    
    if not characters:
        await message.answer(MESSAGES["character_management"]["no_characters"])
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=char["name"])] for char in characters],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=keyboard
    )
    await state.set_state(CharacterManagement.waiting_for_edit_character)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def process_edit_character(message: types.Message, state: FSMContext):
    character_name = message.text.strip()
    character = character_storage.load_character(message.from_user.id, character_name)
    
    if not character:
        await message.answer(
            MESSAGES["common"]["invalid_input"],
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(character_name=character_name)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ò–º—è"), KeyboardButton(text="–†–∞—Å–∞")],
            [KeyboardButton(text="–ö–ª–∞—Å—Å"), KeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
        f"–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
        f"–ò–º—è: {character['name']}\n"
        f"–†–∞—Å–∞: {character['race']}\n"
        f"–ö–ª–∞—Å—Å: {character['class_name']}\n"
        f"–£—Ä–æ–≤–µ–Ω—å: {character['level']}",
        reply_markup=keyboard
    )
    await state.set_state(CharacterManagement.waiting_for_edit_name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def process_edit_parameter(message: types.Message, state: FSMContext):
    parameter = message.text.strip()
    data = await state.get_data()
    character_name = data["character_name"]
    character = character_storage.load_character(message.from_user.id, character_name)
    
    if parameter == "–ò–º—è":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(CharacterManagement.waiting_for_edit_name)
    elif parameter == "–†–∞—Å–∞":
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞—Å–∞–º–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=race)] for race in RACES],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–∞—Å—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
            reply_markup=keyboard
        )
        await state.set_state(CharacterManagement.waiting_for_edit_race)
    elif parameter == "–ö–ª–∞—Å—Å":
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–ª–∞—Å—Å–∞–º–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=class_name)] for class_name in CLASSES],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
            reply_markup=keyboard
        )
        await state.set_state(CharacterManagement.waiting_for_edit_class)
    elif parameter == "–£—Ä–æ–≤–µ–Ω—å":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–æ—Ç 1 –¥–æ 20):",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(CharacterManagement.waiting_for_edit_level)
    else:
        await message.answer(
            MESSAGES["common"]["invalid_input"],
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
async def process_edit_name(message: types.Message, state: FSMContext):
    new_name = message.text.strip()
    
    if len(new_name) < 2 or len(new_name) > 30:
        await message.answer(MESSAGES["character_creation"]["name_invalid"])
        return
    
    data = await state.get_data()
    character_name = data["character_name"]
    character = character_storage.load_character(message.from_user.id, character_name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç–æ –ª–∏ –Ω–æ–≤–æ–µ –∏–º—è
    if new_name != character_name and character_storage.load_character(message.from_user.id, new_name):
        await message.answer("–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    character['name'] = new_name
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if character_storage.save_character(message.from_user.id, character):
        # –ï—Å–ª–∏ –∏–º—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
        if new_name != character_name:
            character_storage.delete_character(message.from_user.id, character_name)
        await message.answer(f"–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}")
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π —Ä–∞—Å—ã
async def process_edit_race(message: types.Message, state: FSMContext):
    new_race = message.text.strip()
    
    if new_race not in RACES:
        await message.answer(MESSAGES["common"]["invalid_input"])
        return
    
    data = await state.get_data()
    character_name = data["character_name"]
    character = character_storage.load_character(message.from_user.id, character_name)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    character['race'] = new_race
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if character_storage.save_character(message.from_user.id, character):
        await message.answer(f"–†–∞—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_race}")
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
async def process_edit_class(message: types.Message, state: FSMContext):
    new_class = message.text.strip()
    
    if new_class not in CLASSES:
        await message.answer(MESSAGES["common"]["invalid_input"])
        return
    
    data = await state.get_data()
    character_name = data["character_name"]
    character = character_storage.load_character(message.from_user.id, character_name)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    character['class_name'] = new_class
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if character_storage.save_character(message.from_user.id, character):
        await message.answer(f"–ö–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_class}")
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
async def process_edit_level(message: types.Message, state: FSMContext):
    try:
        new_level = int(message.text.strip())
        if new_level < 1 or new_level > 20:
            raise ValueError
    except ValueError:
        await message.answer(MESSAGES["character_creation"]["level_invalid"])
        return
    
    data = await state.get_data()
    character_name = data["character_name"]
    character = character_storage.load_character(message.from_user.id, character_name)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    character['level'] = new_level
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if character_storage.save_character(message.from_user.id, character):
        await message.answer(f"–£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_level}")
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
    
    await state.clear()

def register_character_management_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏"""
    dp.message.register(cmd_list_characters, Command("list_characters"))
    dp.message.register(cmd_view_character, Command("view_character"))
    dp.message.register(cmd_delete_character, Command("delete_character"))
    dp.message.register(cmd_set_proficiencies, Command("set_proficiencies"))
    dp.message.register(cmd_set_expertise, Command("set_expertise"))
    dp.message.register(cmd_set_saving_throws, Command("set_saving_throws"))
    dp.message.register(cmd_set_hit_points, Command("set_hit_points"))
    dp.message.register(cmd_set_armor_class, Command("set_armor_class"))
    dp.message.register(cmd_set_speed, Command("set_speed"))
    dp.message.register(cmd_set_proficiency_bonus, Command("set_proficiency_bonus"))
    dp.message.register(cmd_edit_character, Command("edit_character"))
    
    dp.message.register(process_character_select, CharacterManagement.waiting_for_character_select)
    dp.message.register(process_delete_confirmation, CharacterManagement.waiting_for_delete_confirmation)
    dp.message.register(process_delete_answer, CharacterManagement.waiting_for_delete_answer)
    dp.message.register(process_proficiencies_character, CharacterManagement.waiting_for_proficiencies_character)
    dp.message.register(process_proficiencies_list, CharacterManagement.waiting_for_proficiencies_list)
    dp.message.register(process_expertise_character, CharacterManagement.waiting_for_expertise_character)
    dp.message.register(process_expertise_list, CharacterManagement.waiting_for_expertise_list)
    dp.message.register(process_saving_throws_character, CharacterManagement.waiting_for_saving_throws_character)
    dp.message.register(process_saving_throws_list, CharacterManagement.waiting_for_saving_throws_list)
    dp.message.register(process_hit_points_character, CharacterManagement.waiting_for_hit_points_character)
    dp.message.register(process_hit_points_value, CharacterManagement.waiting_for_hit_points_value)
    dp.message.register(process_armor_class_character, CharacterManagement.waiting_for_armor_class_character)
    dp.message.register(process_armor_class_value, CharacterManagement.waiting_for_armor_class_value)
    dp.message.register(process_speed_character, CharacterManagement.waiting_for_speed_character)
    dp.message.register(process_speed_value, CharacterManagement.waiting_for_speed_value)
    dp.message.register(process_proficiency_bonus_character, CharacterManagement.waiting_for_proficiency_bonus_character)
    dp.message.register(process_proficiency_bonus_value, CharacterManagement.waiting_for_proficiency_bonus_value)
    dp.message.register(process_edit_character, CharacterManagement.waiting_for_edit_character)
    dp.message.register(process_edit_parameter, CharacterManagement.waiting_for_edit_name, F.text.in_(["–ò–º—è", "–†–∞—Å–∞", "–ö–ª–∞—Å—Å", "–£—Ä–æ–≤–µ–Ω—å"]))
    dp.message.register(process_edit_name, CharacterManagement.waiting_for_edit_name)
    dp.message.register(process_edit_race, CharacterManagement.waiting_for_edit_race)
    dp.message.register(process_edit_class, CharacterManagement.waiting_for_edit_class)
    dp.message.register(process_edit_level, CharacterManagement.waiting_for_edit_level) 